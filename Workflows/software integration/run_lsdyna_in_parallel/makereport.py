from pytailor import PythonTask, BranchTask, DAG, Workflow, Project, FileSet, Files, Outputs
import numpy as np
from pyreportlib import make_latex_document, make_word_document
import pandas as pd

def make_summary_content(wf):
    # begin report with a summary of hits and near hits and some text as the fist content in the list of report content
    input_parameters = wf.inputs['populate_dyna']['misc']
    n_near_hits = len([v for k, v in wf.outputs['trigger'].items() if 1 < v < 5])
    n_hits = len([v for k, v in wf.outputs['trigger'].items() if v >= 5])

    # Make equal lengths list of input for dataframe
    inputlen = 0
    for k,v in input_parameters.items():
        if isinstance(v,list):
            inputlen = max(len(v), inputlen)
    data = []
    colnames = []
    for k,v in input_parameters.items():
        if (not isinstance(v,list)) or (isinstance(v,list) and len(v) != inputlen):
            input_parameters[k] = [v] * inputlen
        data.append(input_parameters[k])
        colnames.append(k)
    df = pd.DataFrame(data=np.transpose(np.array(data)), columns=colnames)
    df.index.name = 'runID'


    summary_text = [
        f"This report summarizes a simulation of {str(len(wf.outputs['trigger']))} different throws in the game ",
        f"beerpong. For each throw, a new combination of parameters is applied with the goal of hitting the cup. ",
        f"The result was {str(n_near_hits)} near hits and {str(n_hits)} hits."]


    summary_content = {'title': 'Summary', 'content': [
        {'text': ''.join(summary_text)},
        {'image': {'filename': 'allTrajectories/0/allTrajectories2D.png'}},
        {'table' : {'dataframe' : df}}
        ]
    }
    return summary_content


def make_results_content(wf):
    fileset = wf.fileset  # New syntax soon to be implemented
    # fileset = FileSet.from_workflow(wf)
    input_parameters = wf.inputs['populate_dyna']['misc']
    tag = 'LSDYNA_postfiles'
    # sort postfiles by branch
    all_filepaths = fileset.list_files(tags=['LSDYNA_postfiles'])[0]['filenames']
    # branch id is equal to the name of the first folder
    branch_ids = np.unique([int(filepath.split('/')[1]) for filepath in all_filepaths])
    branchfiles = {}
    for branch_id in branch_ids:
        branchfiles[branch_id] = [fp for fp in all_filepaths if int(fp.split('/')[1]) == branch_id]

    # add result chapter with trajectory and plots of the hits
    result_content = {'title': 'Results', 'content': []}
    for branch_id, filenames in branchfiles.items():
        text = [f"For run {branch_id}, the following combination of parameters was tested for:\n"]
        for param, values in input_parameters.items():
            if isinstance(values, list):
                value = values[branch_id]
            else:
                value = values
            text.append(f"\t{param} = {value} \n")
        text[-1] = text[-1].replace(', ', '.')
        # text[-2] = text[-2][:-2] + ' and '
        result_content['content'].append({'title': f'Run {branch_id}', 'content': [
            {'text': text},
            {'title': 'Trajectory', 'content': [
                {'image': {'filename': [fn for fn in filenames if 'Trajectory.png' in fn]}}]},
            {'title': 'Stepwise plots', 'content': [
                {'image': {'filename': [fn for fn in filenames if 'image' in fn]}}]},
        ]})
    return result_content


def make_report_from_beerpong_simulation(wf):
    fileset = wf.fileset  # New syntax soon to be implemented
    # fileset = FileSet.from_workflow(wf)
    fileset.download(tags=['LSDYNA_postfiles', 'allTrajectories'])

    # setting up the document
    make_document_dict = {
        'document_title': f'Autogenerated beer pong report from workflow ID {wf.id}',
        'document_filename': f'pongreport',
        'author': 'Entail AS',
        'fig_ext': u'.pdf',
        'header_logofilename': 'entail.pdf',
        'logo_image_option_header': "width=250px",
        'workflow_ID' : {wf.id},
        'content': [
            make_summary_content(wf),
            {'title': 'Introduction', 'content': [
                {
                    'text': 'This  is an example of an autogenerated report from a tailor workflow of a beerpong game '
                            'simulated with the explicit nonlinear finite element code LS-DYNA. A mesh of a table, a cup '
                            'and a pingpong ball is imported, and a set of initial velocity conditions for the ball are '
                            'simulated in parallel. \n\n For all simulations in which the ball hits twice or more on the '
                            'cup the trajectory and a few snapshots from the simulation are shown. '
                }
            ]
             },
            make_results_content(wf)
        ]
    }

    make_latex_document(**make_document_dict)
    make_word_document(**make_document_dict)


prj = Project.from_name("Prod")
workflow = Workflow.from_project_and_id(prj, 29)
make_report_from_beerpong_simulation(workflow)
#
